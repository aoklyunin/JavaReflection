import java.util.*;
import java.lang.reflect.*;
public class A{
    static {{ STUDENT_ANSWER }}
       public static Object obj1;
    public static Object obj2;

 public static final int MODIFIER_PUBLIC = 0;
    public static final int MODIFIER_PRIVATE = 1;
    public static final int MODIFIER_PROTECTED = 2;
    public static final int MODIFIER_DEFAULT = 3;
public static class MyReflection {

    public static Class interfaceClass;

    public static void setInterfaceClass(Class interfaceClass) {
        MyReflection.interfaceClass = interfaceClass;
    }

    public static RetStruct checkDeclaringMethod(String methodName, Class[] paramTypes){
        return checkDeclaringMethod(methodName, paramTypes,"find method "+methodName,"can not find method "+methodName  );
    }

    public static RetStruct checkDeclaringMethod(String methodName, Class[] paramTypes, String yesString, String noString ){
        RetStruct retStruct = new RetStruct();
        try {
            Class class_var = interfaceClass;
            Method method = class_var.getDeclaredMethod(methodName, paramTypes);
            retStruct = new RetStruct(method,false);
            if (!yesString.equals("")) System.out.println(yesString);
        } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {
            if (!noString.equals("")) System.out.println(noString);
        }
        return retStruct;
    }

public static RetStruct checkDeclaringMethod(String methodName){
        return checkDeclaringMethod(methodName,"find method "+methodName,"can not find method "+methodName  );
    }
    public static RetStruct checkDeclaringMethod(String methodName, String yesString, String noString ){
        RetStruct retStruct = new RetStruct();
        try {
            Class class_var = interfaceClass;
            Method method = class_var.getDeclaredMethod(methodName);
            retStruct = new RetStruct(method,false);
            if (!yesString.equals("")) System.out.println(yesString);
        } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {
            if (!noString.equals("")) System.out.println(noString);
        }
        return retStruct;
    }

    public static boolean checkImlementsInterface(Class c){
        boolean flg = c.isAssignableFrom(obj1.getClass());
        System.out.println(flg?"class implements "+c:"class don't interface "+c);
        return flg;
    }
    public static void setClass(Class className) {
        Constructor constructor = null;
        try {
            constructor = className.getDeclaredConstructor();
            constructor.setAccessible(true);
            obj1 = constructor.newInstance();
            obj2 = constructor.newInstance();
        } catch (NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException e) {
            System.out.println("Error creating object from getted class");
        }

    }

    public static void setField(String fieldName, Object fieldVal1, Object fieldVal2, String yesString, String noString) {
        try {
            Class class_var = obj1.getClass();
            Field field = class_var.getDeclaredField(fieldName);
            field.setAccessible(true);
            field.set(obj1, fieldVal1);
            field.set(obj2, fieldVal2);
            if (!yesString.equals("")) System.out.println(yesString);
        } catch (NoSuchFieldException | IllegalAccessException ignored) {
            if (!noString.equals("")) System.out.println(noString);
        }
    }

    public static void setField(String fieldName, Object fieldVal1, Object fieldVal2) {
        setField(fieldName, fieldVal1, fieldVal2, "", "");
    }

    public static void setFieldInterhited(String fieldName, String yesString, String noString,
                                          Object fieldVal1, Object fieldVal2) {
        try {
            Class class_var = obj1.getClass();
            Field width_field = class_var.getSuperclass().getDeclaredField(fieldName);

            if (!width_field.getType().isArray()) {
                if (!noString.equals("")) System.out.println(noString);
                return;
            }
            width_field.set(obj1, fieldVal1);
            width_field.set(obj2, fieldVal2);
            if (!yesString.equals("")) System.out.println(yesString);
        } catch (NoSuchFieldException | IllegalAccessException ignored) {
            if (!noString.equals("")) System.out.println(noString);
        }
    }

    public static RetStruct getField(String fieldName, String yesString, String noString) {
        RetStruct retStruct = new RetStruct();
        try {
            Class class_var = obj1.getClass();
            Field field = class_var.getDeclaredField(fieldName);
            retStruct = new RetStruct(field);
            if (!yesString.equals("")) System.out.println(yesString);
        } catch (NoSuchFieldException | IllegalAccessException e) {
            if (!noString.equals("")) System.out.println(noString);
            //System.out.println(e+"");
        }
        return retStruct;
    }

    public static RetStruct getField(String fieldName) {
        return getField(fieldName, "find field " + fieldName, "no field " + fieldName);
    }

    public static RetStruct checkMethod(String methodName, Runnable runnable) {
        return checkMethod(methodName, "find method " + methodName, "no method " + methodName, runnable);
    }

    public static RetStruct checkMethod(String methodName, String yesString, String noString, Runnable runnable) {
        RetStruct retStruct = new RetStruct();
        try {
            Class class_var = obj1.getClass();
            Method method = class_var.getDeclaredMethod(methodName);
            retStruct = new RetStruct(method);
            if (!yesString.equals("")) System.out.println(yesString);
            runnable.run();
        } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {
            if (!noString.equals("")) System.out.println(noString);
        }
        return retStruct;
    }

    public static RetStruct checkMethod(String methodName) {
        return checkMethod(methodName, "find method " + methodName, "no method " + methodName);
    }

    public static RetStruct checkMethod(String methodName, String yesString, String noString) {
        RetStruct retStruct = new RetStruct();
        try {
            Class class_var = obj1.getClass();
            Method method = class_var.getDeclaredMethod(methodName);
            retStruct = new RetStruct(method);
            if (!yesString.equals("")) System.out.println(yesString);
        } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {
            if (!noString.equals("")) System.out.println(noString);
        }
        return retStruct;
    }

    public static RetStruct checkMethod(String methodName, Class[] paramTypes, Object[] arg_arr, Object[] arg_arr2, Runnable runnable) {
        return checkMethod(methodName, "find method " + methodName + " with params: " + Arrays.toString(paramTypes), "no method " + methodName, paramTypes,
                arg_arr, arg_arr2, runnable);
    }

    public static RetStruct checkMethod(String methodName, Class[] paramTypes, Object[] arg_arr, Object[] arg_arr2) {
        return checkMethod(methodName, "find method " + methodName + " with params" + Arrays.toString(paramTypes),
                "no method " + methodName + " with params" + Arrays.toString(paramTypes), paramTypes,
                arg_arr, arg_arr2);
    }

    public static RetStruct checkMethod(String methodName, String yesString, String noString,
                                        Class[] paramTypes, Object[] arg_arr, Object[] arg_arr2, Runnable runnable) {
        RetStruct retStruct = new RetStruct();
        try {
            Class class_var = obj1.getClass();
            Method method = class_var.getDeclaredMethod(methodName, paramTypes);
            retStruct = new RetStruct(method, arg_arr, arg_arr2);
            if (!yesString.equals("")) System.out.println(yesString);
            runnable.run();
        } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {
            if (!noString.equals("")) System.out.println(noString);
        }
        return retStruct;

    }


    public static RetStruct checkMethod(String methodName, String yesString, String noString,
                                        Class[] paramTypes, Object[] arg_arr, Object[] arg_arr2) {
        RetStruct retStruct = new RetStruct();
        try {
            Class class_var = obj1.getClass();
            Method method = class_var.getDeclaredMethod(methodName, paramTypes);
            retStruct = new RetStruct(method, arg_arr, arg_arr2);
            if (!yesString.equals("")) System.out.println(yesString);
        } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {
            if (!noString.equals("")) System.out.println(noString);
        }
        return retStruct;

    }


    public static RetStruct checkConstructor(Runnable runnable) {
        return checkConstructor("find constructor", "no constructor", runnable);
    }

    public static RetStruct checkConstructor() {
        return checkConstructor("find constructor", "no constructor");
    }

    public static RetStruct checkConstructor(String yesString, String noString,
                                             Runnable runnable) {
        RetStruct retStruct = new RetStruct();

        try {
            Class class_var = obj1.getClass();
            Constructor constructor = class_var.getDeclaredConstructor();
            retStruct = new RetStruct(constructor);
            if (!yesString.equals("")) System.out.println(yesString);
            runnable.run();
        } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException | InstantiationException e) {
            if (!noString.equals("")) System.out.println(noString);
        }
        return retStruct;
    }

    public static RetStruct checkConstructor(String yesString, String noString) {
        RetStruct retStruct = new RetStruct();
        try {
            Class class_var = obj1.getClass();
            Constructor constructor = class_var.getDeclaredConstructor();
            retStruct = new RetStruct(constructor);
            if (!yesString.equals("")) System.out.println(yesString);
        } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException | InstantiationException e) {
            if (!noString.equals("")) System.out.println(noString);
        }
        return retStruct;
    }


    public static RetStruct checkConstructor(String yesString, String noString, Class[] paramTypes, Object[] arg_arr, Object[] arg_arr2,
                                             Runnable runnable) {
        RetStruct retStruct = new RetStruct();
        try {
            Class class_var = obj1.getClass();
            Constructor constructor = class_var.getDeclaredConstructor(paramTypes);
            retStruct = new RetStruct(constructor, arg_arr, arg_arr2);
            if (!yesString.equals("")) System.out.println(yesString);
            runnable.run();
        } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException | InstantiationException e) {
            if (!noString.equals("")) System.out.println(noString);
        }
        return retStruct;
    }


    public static RetStruct checkConstructor(String yesString, String noString, Class[] paramTypes, Object[] arg_arr, Object[] arg_arr2) {
        RetStruct retStruct = new RetStruct();
        try {
            Class class_var = obj1.getClass();
            Constructor constructor = class_var.getDeclaredConstructor(paramTypes);
            retStruct = new RetStruct(constructor, arg_arr, arg_arr2);
            if (!yesString.equals("")) System.out.println(yesString);
        } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException | InstantiationException e) {
            if (!noString.equals("")) System.out.println(noString);
        }
        return retStruct;
    }

    public static RetStruct checkConstructor(Class[] paramTypes, Object[] arg_arr, Object[] arg_arr2) {
        return checkConstructor("find constructor with params" + Arrays.toString(paramTypes),
                "no constructor with params: " + Arrays.toString(paramTypes), paramTypes,
                arg_arr, arg_arr2);
    }

    public static RetStruct checkConstructor(Class[] paramTypes, Object[] arg_arr, Object[] arg_arr2,
                                             Runnable runnable) {
        return checkConstructor("find constructor with params" + Arrays.toString(paramTypes),
                "no constructor with params" + Arrays.toString(paramTypes), paramTypes,
                arg_arr, arg_arr2, runnable);
    }

    public static void separate() {
        System.out.println("--------------------------------------------------------------------------");
    }


}


public static class RetStruct {

    public Object[] objects = new Object[2];
    public boolean isStatic;
    public int modifier;
    public boolean isFinal;
    public boolean isAbstract;
    public Class paramType;
    public boolean isOverrided;
    public boolean isNullable;

    public RetStruct() {
        isNullable = true;

    }

    static boolean isStatic(int m) {
        if (Modifier.isStatic(m)) return true;
        return false;
    }

    static boolean isFinal(int m) {
        if (Modifier.isFinal(m)) return true;
        return false;
    }

    static boolean isAbstract(int m) {
        if (Modifier.isAbstract(m)) return true;
        return false;
    }

    public RetStruct(Field field) throws IllegalAccessException {
        field.setAccessible(true);
        this.paramType = field.getType();
        this.objects[0] = field.get(obj1);
        this.objects[1] = field.get(obj2);
        this.setModifiers(field.getModifiers());
        this.isNullable = false;
    }

    public RetStruct(Method method) throws IllegalAccessException, InvocationTargetException {
        method.setAccessible(true);
        this.setModifiers(method.getModifiers());
        this.isOverrided = !method.getDeclaringClass().equals(obj1.getClass());
        this.paramType = method.getReturnType();
        this.objects[0] = method.invoke(obj1);
        this.objects[1] = method.invoke(obj2);
        this.isNullable = false;
    }

    public RetStruct(Method method, boolean flg) throws IllegalAccessException, InvocationTargetException {
        method.setAccessible(true);
        //this.setModifiers(method.getModifiers());
        this.isOverrided = false;
        this.paramType = method.getReturnType();
        this.objects[0] = null;
        this.objects[1] = null;
        this.isNullable = false;
    }
    public RetStruct(Method method, Object[] arg_arr, Object[] arg_arr2) throws IllegalAccessException, InvocationTargetException {
        method.setAccessible(true);
        this.setModifiers(method.getModifiers());
        this.isOverrided = !method.getDeclaringClass().equals(obj1.getClass());
        this.paramType = method.getReturnType();
        this.objects[0] = method.invoke(obj1, arg_arr);
        this.objects[1] = method.invoke(obj2, arg_arr2);
        this.isNullable = false;

    }

    public RetStruct(Constructor constructor) throws IllegalAccessException, InvocationTargetException, InstantiationException {
        constructor.setAccessible(true);
        this.setModifiers(constructor.getModifiers());
        this.isOverrided = false;
        this.paramType = obj1.getClass();
        this.objects[0] = constructor.newInstance();
        this.objects[1] = constructor.newInstance();
        this.isNullable = false;
    }

    public RetStruct(Constructor constructor, Object[] arg_arr, Object[] arg_arr2) throws IllegalAccessException, InvocationTargetException, InstantiationException {
        constructor.setAccessible(true);
        this.setModifiers(constructor.getModifiers());
        this.isOverrided = false;
        this.paramType = obj1.getClass();
        this.objects[0] = constructor.newInstance(arg_arr);
        this.objects[1] = constructor.newInstance(arg_arr2);
        this.isNullable = false;
    }

    public void check(int modifier, String yesString, String noString) {
        if (isNullable) {
            System.out.println(noString);
            return;
        }
        if (this.modifier == modifier) {
            System.out.println(yesString + this.getObjects());
        } else {
            System.out.println(noString);
        }
    }

    public void check(int modifier) {
        check(modifier,"success definding ", "error definding ");
    }

    public void check(Class paramType, boolean isStatic, boolean isFinal, boolean isAbstract, boolean isOverrided, int modifier) {
        check(paramType, isStatic, isFinal, isAbstract, isOverrided, modifier, "success definding ", "error definding ");
    }

    public void check(Class paramType, boolean isStatic, boolean isFinal, boolean isAbstract, boolean isOverrided, int modifier,
                      String yesString, String noString) {
        if (isNullable) {
            System.out.println(noString);
            return;
        }
        if (this.paramType == paramType && this.isStatic == isStatic && this.isFinal == isFinal && this.isOverrided == isOverrided && this.isAbstract == isAbstract && this.modifier == modifier) {
            System.out.println(yesString + this.getObjects());
        } else {
            System.out.println(noString);
        }
    }

    public void check(Class paramType) {
        check(paramType, "success definding ", "error definding ");
    }

    public void check(Class paramType, String yesString, String noString) {
        if (isNullable) {
            System.out.println(noString);
            return;
        }
        if (this.paramType == paramType) {
            System.out.println(yesString + this.getObjects());
        } else {
            System.out.println(noString);
        }
    }

    public void check(String noString, String yesString) {
        if (isNullable) {
            System.out.println(noString);
            return;
        }
        System.out.println(yesString+this.getObjects());
    }

    public void check() {
        check("error definding ", "success definding ");
    }

    public void check(Class paramType, int modifier) {
        check(paramType, modifier, "success definding ", "error definding ");
    }

    public void check(Class paramType, int modifier, String yesString, String noString) {
        if (isNullable) {
            System.out.println(noString);
            return;
        }
        if (this.paramType == paramType && this.modifier == modifier) {
            System.out.println(yesString + this.getObjects());
        } else {
            System.out.println(noString);
        }
    }

    @Override
    public String toString() {
        return "RetStruct{" +
                "objects=" + Arrays.toString(objects) +
                ", isStatic=" + isStatic +
                ", modifier=" + modifier +
                ", isFinal=" + isFinal +
                ", isAbstract=" + isAbstract +
                ", paramType=" + paramType +
                ", isOverrided=" + isOverrided +
                ", isNullable=" + isNullable +
                '}';
    }

    public String getObjects() {
        String s = "";
        if (objects[0]!=null&&objects[0].getClass().isArray()) return "";
        for (Object o : objects)
            s += o==null?"null ":o.toString() + " ";
        return s;
    }

    static int getModifiersAccess(int m) {
        if (Modifier.isPublic(m)) return MODIFIER_PUBLIC;
        if (Modifier.isProtected(m)) return MODIFIER_PROTECTED;
        if (Modifier.isPrivate(m)) return MODIFIER_PRIVATE;
        return MODIFIER_DEFAULT;
    }

    void setModifiers(int m) {
        this.modifier = getModifiersAccess(m);
        this.isStatic = isStatic(m);
        this.isFinal = isFinal(m);
        this.isAbstract = isAbstract(m);
    }


}
    public static void main(String [] args){
         MyReflection.setInterfaceClass(TestInterface.class);

        {{ TEST.testcode }}
    }
}